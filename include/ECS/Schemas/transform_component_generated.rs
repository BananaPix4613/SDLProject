// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::common_types_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod pixel_craft {

  use crate::common_types_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod ecs {

  use crate::common_types_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum TransformComponentDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TransformComponentData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TransformComponentData<'a> {
  type Inner = TransformComponentData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TransformComponentData<'a> {
  pub const VT_LOCAL_POSITION: flatbuffers::VOffsetT = 4;
  pub const VT_LOCAL_ROTATION: flatbuffers::VOffsetT = 6;
  pub const VT_LOCAL_SCALE: flatbuffers::VOffsetT = 8;
  pub const VT_PARENT: flatbuffers::VOffsetT = 10;
  pub const VT_CHILDREN: flatbuffers::VOffsetT = 12;
  pub const VT_WORLD_TRANSFORM_DIRTY: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TransformComponentData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TransformComponentDataArgs<'args>
  ) -> flatbuffers::WIPOffset<TransformComponentData<'bldr>> {
    let mut builder = TransformComponentDataBuilder::new(_fbb);
    if let Some(x) = args.children { builder.add_children(x); }
    builder.add_parent(args.parent);
    if let Some(x) = args.local_scale { builder.add_local_scale(x); }
    if let Some(x) = args.local_rotation { builder.add_local_rotation(x); }
    if let Some(x) = args.local_position { builder.add_local_position(x); }
    builder.add_world_transform_dirty(args.world_transform_dirty);
    builder.finish()
  }


  #[inline]
  pub fn local_position(&self) -> Option<&'a Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec3>(TransformComponentData::VT_LOCAL_POSITION, None)}
  }
  #[inline]
  pub fn local_rotation(&self) -> Option<&'a Quat> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Quat>(TransformComponentData::VT_LOCAL_ROTATION, None)}
  }
  #[inline]
  pub fn local_scale(&self) -> Option<&'a Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec3>(TransformComponentData::VT_LOCAL_SCALE, None)}
  }
  #[inline]
  pub fn parent(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TransformComponentData::VT_PARENT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn children(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(TransformComponentData::VT_CHILDREN, None)}
  }
  #[inline]
  pub fn world_transform_dirty(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TransformComponentData::VT_WORLD_TRANSFORM_DIRTY, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TransformComponentData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Vec3>("local_position", Self::VT_LOCAL_POSITION, false)?
     .visit_field::<Quat>("local_rotation", Self::VT_LOCAL_ROTATION, false)?
     .visit_field::<Vec3>("local_scale", Self::VT_LOCAL_SCALE, false)?
     .visit_field::<u32>("parent", Self::VT_PARENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("children", Self::VT_CHILDREN, false)?
     .visit_field::<bool>("world_transform_dirty", Self::VT_WORLD_TRANSFORM_DIRTY, false)?
     .finish();
    Ok(())
  }
}
pub struct TransformComponentDataArgs<'a> {
    pub local_position: Option<&'a Vec3>,
    pub local_rotation: Option<&'a Quat>,
    pub local_scale: Option<&'a Vec3>,
    pub parent: u32,
    pub children: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub world_transform_dirty: bool,
}
impl<'a> Default for TransformComponentDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    TransformComponentDataArgs {
      local_position: None,
      local_rotation: None,
      local_scale: None,
      parent: 0,
      children: None,
      world_transform_dirty: false,
    }
  }
}

pub struct TransformComponentDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TransformComponentDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_local_position(&mut self, local_position: &Vec3) {
    self.fbb_.push_slot_always::<&Vec3>(TransformComponentData::VT_LOCAL_POSITION, local_position);
  }
  #[inline]
  pub fn add_local_rotation(&mut self, local_rotation: &Quat) {
    self.fbb_.push_slot_always::<&Quat>(TransformComponentData::VT_LOCAL_ROTATION, local_rotation);
  }
  #[inline]
  pub fn add_local_scale(&mut self, local_scale: &Vec3) {
    self.fbb_.push_slot_always::<&Vec3>(TransformComponentData::VT_LOCAL_SCALE, local_scale);
  }
  #[inline]
  pub fn add_parent(&mut self, parent: u32) {
    self.fbb_.push_slot::<u32>(TransformComponentData::VT_PARENT, parent, 0);
  }
  #[inline]
  pub fn add_children(&mut self, children: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TransformComponentData::VT_CHILDREN, children);
  }
  #[inline]
  pub fn add_world_transform_dirty(&mut self, world_transform_dirty: bool) {
    self.fbb_.push_slot::<bool>(TransformComponentData::VT_WORLD_TRANSFORM_DIRTY, world_transform_dirty, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TransformComponentDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TransformComponentDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TransformComponentData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TransformComponentData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TransformComponentData");
      ds.field("local_position", &self.local_position());
      ds.field("local_rotation", &self.local_rotation());
      ds.field("local_scale", &self.local_scale());
      ds.field("parent", &self.parent());
      ds.field("children", &self.children());
      ds.field("world_transform_dirty", &self.world_transform_dirty());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TransformComponentData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_transform_component_data_unchecked`.
pub fn root_as_transform_component_data(buf: &[u8]) -> Result<TransformComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TransformComponentData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TransformComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_transform_component_data_unchecked`.
pub fn size_prefixed_root_as_transform_component_data(buf: &[u8]) -> Result<TransformComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TransformComponentData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TransformComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_transform_component_data_unchecked`.
pub fn root_as_transform_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TransformComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TransformComponentData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TransformComponentData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_transform_component_data_unchecked`.
pub fn size_prefixed_root_as_transform_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TransformComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TransformComponentData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TransformComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TransformComponentData`.
pub unsafe fn root_as_transform_component_data_unchecked(buf: &[u8]) -> TransformComponentData {
  flatbuffers::root_unchecked::<TransformComponentData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TransformComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TransformComponentData`.
pub unsafe fn size_prefixed_root_as_transform_component_data_unchecked(buf: &[u8]) -> TransformComponentData {
  flatbuffers::size_prefixed_root_unchecked::<TransformComponentData>(buf)
}
pub const TRANSFORM_COMPONENT_DATA_IDENTIFIER: &str = "TRFM";

#[inline]
pub fn transform_component_data_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, TRANSFORM_COMPONENT_DATA_IDENTIFIER, false)
}

#[inline]
pub fn transform_component_data_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, TRANSFORM_COMPONENT_DATA_IDENTIFIER, true)
}

#[inline]
pub fn finish_transform_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<TransformComponentData<'a>>) {
  fbb.finish(root, Some(TRANSFORM_COMPONENT_DATA_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_transform_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<TransformComponentData<'a>>) {
  fbb.finish_size_prefixed(root, Some(TRANSFORM_COMPONENT_DATA_IDENTIFIER));
}
}  // pub mod ECS
}  // pub mod PixelCraft

