// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RIGIDBODYCOMPONENT_PIXELCRAFT_ECS_H_
#define FLATBUFFERS_GENERATED_RIGIDBODYCOMPONENT_PIXELCRAFT_ECS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "common_types_generated.h"

namespace PixelCraft {
namespace ECS {

struct RigidBodyComponentData;
struct RigidBodyComponentDataBuilder;

enum BodyType : int8_t {
  BodyType_Static = 0,
  BodyType_Kinematic = 1,
  BodyType_Dynamic = 2,
  BodyType_MIN = BodyType_Static,
  BodyType_MAX = BodyType_Dynamic
};

inline const BodyType (&EnumValuesBodyType())[3] {
  static const BodyType values[] = {
    BodyType_Static,
    BodyType_Kinematic,
    BodyType_Dynamic
  };
  return values;
}

inline const char * const *EnumNamesBodyType() {
  static const char * const names[4] = {
    "Static",
    "Kinematic",
    "Dynamic",
    nullptr
  };
  return names;
}

inline const char *EnumNameBodyType(BodyType e) {
  if (::flatbuffers::IsOutRange(e, BodyType_Static, BodyType_Dynamic)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBodyType()[index];
}

struct RigidBodyComponentData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RigidBodyComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BODY_TYPE = 4,
    VT_MASS = 6,
    VT_DRAG = 8,
    VT_ANGULAR_DRAG = 10,
    VT_USE_GRAVITY = 12,
    VT_IS_KINEMATIC = 14,
    VT_LINEAR_VELOCITY = 16,
    VT_ANGULAR_VELOCITY = 18
  };
  PixelCraft::ECS::BodyType body_type() const {
    return static_cast<PixelCraft::ECS::BodyType>(GetField<int8_t>(VT_BODY_TYPE, 0));
  }
  float mass() const {
    return GetField<float>(VT_MASS, 0.0f);
  }
  float drag() const {
    return GetField<float>(VT_DRAG, 0.0f);
  }
  float angular_drag() const {
    return GetField<float>(VT_ANGULAR_DRAG, 0.0f);
  }
  bool use_gravity() const {
    return GetField<uint8_t>(VT_USE_GRAVITY, 0) != 0;
  }
  bool is_kinematic() const {
    return GetField<uint8_t>(VT_IS_KINEMATIC, 0) != 0;
  }
  const PixelCraft::ECS::Vec3 *linear_velocity() const {
    return GetStruct<const PixelCraft::ECS::Vec3 *>(VT_LINEAR_VELOCITY);
  }
  const PixelCraft::ECS::Vec3 *angular_velocity() const {
    return GetStruct<const PixelCraft::ECS::Vec3 *>(VT_ANGULAR_VELOCITY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyField<float>(verifier, VT_MASS, 4) &&
           VerifyField<float>(verifier, VT_DRAG, 4) &&
           VerifyField<float>(verifier, VT_ANGULAR_DRAG, 4) &&
           VerifyField<uint8_t>(verifier, VT_USE_GRAVITY, 1) &&
           VerifyField<uint8_t>(verifier, VT_IS_KINEMATIC, 1) &&
           VerifyField<PixelCraft::ECS::Vec3>(verifier, VT_LINEAR_VELOCITY, 4) &&
           VerifyField<PixelCraft::ECS::Vec3>(verifier, VT_ANGULAR_VELOCITY, 4) &&
           verifier.EndTable();
  }
};

struct RigidBodyComponentDataBuilder {
  typedef RigidBodyComponentData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_body_type(PixelCraft::ECS::BodyType body_type) {
    fbb_.AddElement<int8_t>(RigidBodyComponentData::VT_BODY_TYPE, static_cast<int8_t>(body_type), 0);
  }
  void add_mass(float mass) {
    fbb_.AddElement<float>(RigidBodyComponentData::VT_MASS, mass, 0.0f);
  }
  void add_drag(float drag) {
    fbb_.AddElement<float>(RigidBodyComponentData::VT_DRAG, drag, 0.0f);
  }
  void add_angular_drag(float angular_drag) {
    fbb_.AddElement<float>(RigidBodyComponentData::VT_ANGULAR_DRAG, angular_drag, 0.0f);
  }
  void add_use_gravity(bool use_gravity) {
    fbb_.AddElement<uint8_t>(RigidBodyComponentData::VT_USE_GRAVITY, static_cast<uint8_t>(use_gravity), 0);
  }
  void add_is_kinematic(bool is_kinematic) {
    fbb_.AddElement<uint8_t>(RigidBodyComponentData::VT_IS_KINEMATIC, static_cast<uint8_t>(is_kinematic), 0);
  }
  void add_linear_velocity(const PixelCraft::ECS::Vec3 *linear_velocity) {
    fbb_.AddStruct(RigidBodyComponentData::VT_LINEAR_VELOCITY, linear_velocity);
  }
  void add_angular_velocity(const PixelCraft::ECS::Vec3 *angular_velocity) {
    fbb_.AddStruct(RigidBodyComponentData::VT_ANGULAR_VELOCITY, angular_velocity);
  }
  explicit RigidBodyComponentDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RigidBodyComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RigidBodyComponentData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RigidBodyComponentData> CreateRigidBodyComponentData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    PixelCraft::ECS::BodyType body_type = PixelCraft::ECS::BodyType_Static,
    float mass = 0.0f,
    float drag = 0.0f,
    float angular_drag = 0.0f,
    bool use_gravity = false,
    bool is_kinematic = false,
    const PixelCraft::ECS::Vec3 *linear_velocity = nullptr,
    const PixelCraft::ECS::Vec3 *angular_velocity = nullptr) {
  RigidBodyComponentDataBuilder builder_(_fbb);
  builder_.add_angular_velocity(angular_velocity);
  builder_.add_linear_velocity(linear_velocity);
  builder_.add_angular_drag(angular_drag);
  builder_.add_drag(drag);
  builder_.add_mass(mass);
  builder_.add_is_kinematic(is_kinematic);
  builder_.add_use_gravity(use_gravity);
  builder_.add_body_type(body_type);
  return builder_.Finish();
}

inline const PixelCraft::ECS::RigidBodyComponentData *GetRigidBodyComponentData(const void *buf) {
  return ::flatbuffers::GetRoot<PixelCraft::ECS::RigidBodyComponentData>(buf);
}

inline const PixelCraft::ECS::RigidBodyComponentData *GetSizePrefixedRigidBodyComponentData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PixelCraft::ECS::RigidBodyComponentData>(buf);
}

inline const char *RigidBodyComponentDataIdentifier() {
  return "RGBD";
}

inline bool RigidBodyComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RigidBodyComponentDataIdentifier());
}

inline bool SizePrefixedRigidBodyComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RigidBodyComponentDataIdentifier(), true);
}

inline bool VerifyRigidBodyComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PixelCraft::ECS::RigidBodyComponentData>(RigidBodyComponentDataIdentifier());
}

inline bool VerifySizePrefixedRigidBodyComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PixelCraft::ECS::RigidBodyComponentData>(RigidBodyComponentDataIdentifier());
}

inline void FinishRigidBodyComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::RigidBodyComponentData> root) {
  fbb.Finish(root, RigidBodyComponentDataIdentifier());
}

inline void FinishSizePrefixedRigidBodyComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::RigidBodyComponentData> root) {
  fbb.FinishSizePrefixed(root, RigidBodyComponentDataIdentifier());
}

}  // namespace ECS
}  // namespace PixelCraft

#endif  // FLATBUFFERS_GENERATED_RIGIDBODYCOMPONENT_PIXELCRAFT_ECS_H_
