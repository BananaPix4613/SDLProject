// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESHRENDERERCOMPONENT_PIXELCRAFT_ECS_H_
#define FLATBUFFERS_GENERATED_MESHRENDERERCOMPONENT_PIXELCRAFT_ECS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace PixelCraft {
namespace ECS {

struct MeshRendererComponentData;
struct MeshRendererComponentDataBuilder;

struct MeshRendererComponentData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MeshRendererComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESH_PATH = 4,
    VT_MATERIAL_PATH = 6,
    VT_CAST_SHADOWS = 8,
    VT_RECEIVE_SHADOWS = 10,
    VT_ENABLED = 12
  };
  const ::flatbuffers::String *mesh_path() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESH_PATH);
  }
  const ::flatbuffers::String *material_path() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MATERIAL_PATH);
  }
  bool cast_shadows() const {
    return GetField<uint8_t>(VT_CAST_SHADOWS, 0) != 0;
  }
  bool receive_shadows() const {
    return GetField<uint8_t>(VT_RECEIVE_SHADOWS, 0) != 0;
  }
  bool enabled() const {
    return GetField<uint8_t>(VT_ENABLED, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESH_PATH) &&
           verifier.VerifyString(mesh_path()) &&
           VerifyOffset(verifier, VT_MATERIAL_PATH) &&
           verifier.VerifyString(material_path()) &&
           VerifyField<uint8_t>(verifier, VT_CAST_SHADOWS, 1) &&
           VerifyField<uint8_t>(verifier, VT_RECEIVE_SHADOWS, 1) &&
           VerifyField<uint8_t>(verifier, VT_ENABLED, 1) &&
           verifier.EndTable();
  }
};

struct MeshRendererComponentDataBuilder {
  typedef MeshRendererComponentData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_mesh_path(::flatbuffers::Offset<::flatbuffers::String> mesh_path) {
    fbb_.AddOffset(MeshRendererComponentData::VT_MESH_PATH, mesh_path);
  }
  void add_material_path(::flatbuffers::Offset<::flatbuffers::String> material_path) {
    fbb_.AddOffset(MeshRendererComponentData::VT_MATERIAL_PATH, material_path);
  }
  void add_cast_shadows(bool cast_shadows) {
    fbb_.AddElement<uint8_t>(MeshRendererComponentData::VT_CAST_SHADOWS, static_cast<uint8_t>(cast_shadows), 0);
  }
  void add_receive_shadows(bool receive_shadows) {
    fbb_.AddElement<uint8_t>(MeshRendererComponentData::VT_RECEIVE_SHADOWS, static_cast<uint8_t>(receive_shadows), 0);
  }
  void add_enabled(bool enabled) {
    fbb_.AddElement<uint8_t>(MeshRendererComponentData::VT_ENABLED, static_cast<uint8_t>(enabled), 0);
  }
  explicit MeshRendererComponentDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MeshRendererComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MeshRendererComponentData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MeshRendererComponentData> CreateMeshRendererComponentData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> mesh_path = 0,
    ::flatbuffers::Offset<::flatbuffers::String> material_path = 0,
    bool cast_shadows = false,
    bool receive_shadows = false,
    bool enabled = false) {
  MeshRendererComponentDataBuilder builder_(_fbb);
  builder_.add_material_path(material_path);
  builder_.add_mesh_path(mesh_path);
  builder_.add_enabled(enabled);
  builder_.add_receive_shadows(receive_shadows);
  builder_.add_cast_shadows(cast_shadows);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MeshRendererComponentData> CreateMeshRendererComponentDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *mesh_path = nullptr,
    const char *material_path = nullptr,
    bool cast_shadows = false,
    bool receive_shadows = false,
    bool enabled = false) {
  auto mesh_path__ = mesh_path ? _fbb.CreateString(mesh_path) : 0;
  auto material_path__ = material_path ? _fbb.CreateString(material_path) : 0;
  return PixelCraft::ECS::CreateMeshRendererComponentData(
      _fbb,
      mesh_path__,
      material_path__,
      cast_shadows,
      receive_shadows,
      enabled);
}

inline const PixelCraft::ECS::MeshRendererComponentData *GetMeshRendererComponentData(const void *buf) {
  return ::flatbuffers::GetRoot<PixelCraft::ECS::MeshRendererComponentData>(buf);
}

inline const PixelCraft::ECS::MeshRendererComponentData *GetSizePrefixedMeshRendererComponentData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PixelCraft::ECS::MeshRendererComponentData>(buf);
}

inline const char *MeshRendererComponentDataIdentifier() {
  return "MSHR";
}

inline bool MeshRendererComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MeshRendererComponentDataIdentifier());
}

inline bool SizePrefixedMeshRendererComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MeshRendererComponentDataIdentifier(), true);
}

inline bool VerifyMeshRendererComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PixelCraft::ECS::MeshRendererComponentData>(MeshRendererComponentDataIdentifier());
}

inline bool VerifySizePrefixedMeshRendererComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PixelCraft::ECS::MeshRendererComponentData>(MeshRendererComponentDataIdentifier());
}

inline void FinishMeshRendererComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::MeshRendererComponentData> root) {
  fbb.Finish(root, MeshRendererComponentDataIdentifier());
}

inline void FinishSizePrefixedMeshRendererComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::MeshRendererComponentData> root) {
  fbb.FinishSizePrefixed(root, MeshRendererComponentDataIdentifier());
}

}  // namespace ECS
}  // namespace PixelCraft

#endif  // FLATBUFFERS_GENERATED_MESHRENDERERCOMPONENT_PIXELCRAFT_ECS_H_
