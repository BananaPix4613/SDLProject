// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod pixel_craft {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod ecs {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum MeshRendererComponentDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MeshRendererComponentData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MeshRendererComponentData<'a> {
  type Inner = MeshRendererComponentData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MeshRendererComponentData<'a> {
  pub const VT_MESH_PATH: flatbuffers::VOffsetT = 4;
  pub const VT_MATERIAL_PATH: flatbuffers::VOffsetT = 6;
  pub const VT_CAST_SHADOWS: flatbuffers::VOffsetT = 8;
  pub const VT_RECEIVE_SHADOWS: flatbuffers::VOffsetT = 10;
  pub const VT_ENABLED: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MeshRendererComponentData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MeshRendererComponentDataArgs<'args>
  ) -> flatbuffers::WIPOffset<MeshRendererComponentData<'bldr>> {
    let mut builder = MeshRendererComponentDataBuilder::new(_fbb);
    if let Some(x) = args.material_path { builder.add_material_path(x); }
    if let Some(x) = args.mesh_path { builder.add_mesh_path(x); }
    builder.add_enabled(args.enabled);
    builder.add_receive_shadows(args.receive_shadows);
    builder.add_cast_shadows(args.cast_shadows);
    builder.finish()
  }


  #[inline]
  pub fn mesh_path(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MeshRendererComponentData::VT_MESH_PATH, None)}
  }
  #[inline]
  pub fn material_path(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MeshRendererComponentData::VT_MATERIAL_PATH, None)}
  }
  #[inline]
  pub fn cast_shadows(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MeshRendererComponentData::VT_CAST_SHADOWS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn receive_shadows(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MeshRendererComponentData::VT_RECEIVE_SHADOWS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn enabled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MeshRendererComponentData::VT_ENABLED, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MeshRendererComponentData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("mesh_path", Self::VT_MESH_PATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("material_path", Self::VT_MATERIAL_PATH, false)?
     .visit_field::<bool>("cast_shadows", Self::VT_CAST_SHADOWS, false)?
     .visit_field::<bool>("receive_shadows", Self::VT_RECEIVE_SHADOWS, false)?
     .visit_field::<bool>("enabled", Self::VT_ENABLED, false)?
     .finish();
    Ok(())
  }
}
pub struct MeshRendererComponentDataArgs<'a> {
    pub mesh_path: Option<flatbuffers::WIPOffset<&'a str>>,
    pub material_path: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cast_shadows: bool,
    pub receive_shadows: bool,
    pub enabled: bool,
}
impl<'a> Default for MeshRendererComponentDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    MeshRendererComponentDataArgs {
      mesh_path: None,
      material_path: None,
      cast_shadows: false,
      receive_shadows: false,
      enabled: false,
    }
  }
}

pub struct MeshRendererComponentDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MeshRendererComponentDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_mesh_path(&mut self, mesh_path: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MeshRendererComponentData::VT_MESH_PATH, mesh_path);
  }
  #[inline]
  pub fn add_material_path(&mut self, material_path: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MeshRendererComponentData::VT_MATERIAL_PATH, material_path);
  }
  #[inline]
  pub fn add_cast_shadows(&mut self, cast_shadows: bool) {
    self.fbb_.push_slot::<bool>(MeshRendererComponentData::VT_CAST_SHADOWS, cast_shadows, false);
  }
  #[inline]
  pub fn add_receive_shadows(&mut self, receive_shadows: bool) {
    self.fbb_.push_slot::<bool>(MeshRendererComponentData::VT_RECEIVE_SHADOWS, receive_shadows, false);
  }
  #[inline]
  pub fn add_enabled(&mut self, enabled: bool) {
    self.fbb_.push_slot::<bool>(MeshRendererComponentData::VT_ENABLED, enabled, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MeshRendererComponentDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MeshRendererComponentDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MeshRendererComponentData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MeshRendererComponentData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MeshRendererComponentData");
      ds.field("mesh_path", &self.mesh_path());
      ds.field("material_path", &self.material_path());
      ds.field("cast_shadows", &self.cast_shadows());
      ds.field("receive_shadows", &self.receive_shadows());
      ds.field("enabled", &self.enabled());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MeshRendererComponentData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mesh_renderer_component_data_unchecked`.
pub fn root_as_mesh_renderer_component_data(buf: &[u8]) -> Result<MeshRendererComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MeshRendererComponentData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MeshRendererComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_mesh_renderer_component_data_unchecked`.
pub fn size_prefixed_root_as_mesh_renderer_component_data(buf: &[u8]) -> Result<MeshRendererComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MeshRendererComponentData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MeshRendererComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mesh_renderer_component_data_unchecked`.
pub fn root_as_mesh_renderer_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MeshRendererComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MeshRendererComponentData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MeshRendererComponentData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mesh_renderer_component_data_unchecked`.
pub fn size_prefixed_root_as_mesh_renderer_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MeshRendererComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MeshRendererComponentData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MeshRendererComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MeshRendererComponentData`.
pub unsafe fn root_as_mesh_renderer_component_data_unchecked(buf: &[u8]) -> MeshRendererComponentData {
  flatbuffers::root_unchecked::<MeshRendererComponentData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MeshRendererComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MeshRendererComponentData`.
pub unsafe fn size_prefixed_root_as_mesh_renderer_component_data_unchecked(buf: &[u8]) -> MeshRendererComponentData {
  flatbuffers::size_prefixed_root_unchecked::<MeshRendererComponentData>(buf)
}
pub const MESH_RENDERER_COMPONENT_DATA_IDENTIFIER: &str = "MSHR";

#[inline]
pub fn mesh_renderer_component_data_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MESH_RENDERER_COMPONENT_DATA_IDENTIFIER, false)
}

#[inline]
pub fn mesh_renderer_component_data_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MESH_RENDERER_COMPONENT_DATA_IDENTIFIER, true)
}

#[inline]
pub fn finish_mesh_renderer_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<MeshRendererComponentData<'a>>) {
  fbb.finish(root, Some(MESH_RENDERER_COMPONENT_DATA_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_mesh_renderer_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<MeshRendererComponentData<'a>>) {
  fbb.finish_size_prefixed(root, Some(MESH_RENDERER_COMPONENT_DATA_IDENTIFIER));
}
}  // pub mod ECS
}  // pub mod PixelCraft

