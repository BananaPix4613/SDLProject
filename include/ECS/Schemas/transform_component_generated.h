// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRANSFORMCOMPONENT_PIXELCRAFT_ECS_H_
#define FLATBUFFERS_GENERATED_TRANSFORMCOMPONENT_PIXELCRAFT_ECS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "common_types_generated.h"

namespace PixelCraft {
namespace ECS {

struct TransformComponentData;
struct TransformComponentDataBuilder;

struct TransformComponentData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TransformComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOCAL_POSITION = 4,
    VT_LOCAL_ROTATION = 6,
    VT_LOCAL_SCALE = 8,
    VT_PARENT = 10,
    VT_CHILDREN = 12,
    VT_WORLD_TRANSFORM_DIRTY = 14
  };
  const PixelCraft::ECS::Vec3 *local_position() const {
    return GetStruct<const PixelCraft::ECS::Vec3 *>(VT_LOCAL_POSITION);
  }
  const PixelCraft::ECS::Quat *local_rotation() const {
    return GetStruct<const PixelCraft::ECS::Quat *>(VT_LOCAL_ROTATION);
  }
  const PixelCraft::ECS::Vec3 *local_scale() const {
    return GetStruct<const PixelCraft::ECS::Vec3 *>(VT_LOCAL_SCALE);
  }
  uint32_t parent() const {
    return GetField<uint32_t>(VT_PARENT, 0);
  }
  const ::flatbuffers::Vector<uint32_t> *children() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_CHILDREN);
  }
  bool world_transform_dirty() const {
    return GetField<uint8_t>(VT_WORLD_TRANSFORM_DIRTY, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<PixelCraft::ECS::Vec3>(verifier, VT_LOCAL_POSITION, 4) &&
           VerifyField<PixelCraft::ECS::Quat>(verifier, VT_LOCAL_ROTATION, 4) &&
           VerifyField<PixelCraft::ECS::Vec3>(verifier, VT_LOCAL_SCALE, 4) &&
           VerifyField<uint32_t>(verifier, VT_PARENT, 4) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           VerifyField<uint8_t>(verifier, VT_WORLD_TRANSFORM_DIRTY, 1) &&
           verifier.EndTable();
  }
};

struct TransformComponentDataBuilder {
  typedef TransformComponentData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_local_position(const PixelCraft::ECS::Vec3 *local_position) {
    fbb_.AddStruct(TransformComponentData::VT_LOCAL_POSITION, local_position);
  }
  void add_local_rotation(const PixelCraft::ECS::Quat *local_rotation) {
    fbb_.AddStruct(TransformComponentData::VT_LOCAL_ROTATION, local_rotation);
  }
  void add_local_scale(const PixelCraft::ECS::Vec3 *local_scale) {
    fbb_.AddStruct(TransformComponentData::VT_LOCAL_SCALE, local_scale);
  }
  void add_parent(uint32_t parent) {
    fbb_.AddElement<uint32_t>(TransformComponentData::VT_PARENT, parent, 0);
  }
  void add_children(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> children) {
    fbb_.AddOffset(TransformComponentData::VT_CHILDREN, children);
  }
  void add_world_transform_dirty(bool world_transform_dirty) {
    fbb_.AddElement<uint8_t>(TransformComponentData::VT_WORLD_TRANSFORM_DIRTY, static_cast<uint8_t>(world_transform_dirty), 0);
  }
  explicit TransformComponentDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TransformComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TransformComponentData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TransformComponentData> CreateTransformComponentData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const PixelCraft::ECS::Vec3 *local_position = nullptr,
    const PixelCraft::ECS::Quat *local_rotation = nullptr,
    const PixelCraft::ECS::Vec3 *local_scale = nullptr,
    uint32_t parent = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> children = 0,
    bool world_transform_dirty = false) {
  TransformComponentDataBuilder builder_(_fbb);
  builder_.add_children(children);
  builder_.add_parent(parent);
  builder_.add_local_scale(local_scale);
  builder_.add_local_rotation(local_rotation);
  builder_.add_local_position(local_position);
  builder_.add_world_transform_dirty(world_transform_dirty);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TransformComponentData> CreateTransformComponentDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const PixelCraft::ECS::Vec3 *local_position = nullptr,
    const PixelCraft::ECS::Quat *local_rotation = nullptr,
    const PixelCraft::ECS::Vec3 *local_scale = nullptr,
    uint32_t parent = 0,
    const std::vector<uint32_t> *children = nullptr,
    bool world_transform_dirty = false) {
  auto children__ = children ? _fbb.CreateVector<uint32_t>(*children) : 0;
  return PixelCraft::ECS::CreateTransformComponentData(
      _fbb,
      local_position,
      local_rotation,
      local_scale,
      parent,
      children__,
      world_transform_dirty);
}

inline const PixelCraft::ECS::TransformComponentData *GetTransformComponentData(const void *buf) {
  return ::flatbuffers::GetRoot<PixelCraft::ECS::TransformComponentData>(buf);
}

inline const PixelCraft::ECS::TransformComponentData *GetSizePrefixedTransformComponentData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PixelCraft::ECS::TransformComponentData>(buf);
}

inline const char *TransformComponentDataIdentifier() {
  return "TRFM";
}

inline bool TransformComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TransformComponentDataIdentifier());
}

inline bool SizePrefixedTransformComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TransformComponentDataIdentifier(), true);
}

inline bool VerifyTransformComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PixelCraft::ECS::TransformComponentData>(TransformComponentDataIdentifier());
}

inline bool VerifySizePrefixedTransformComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PixelCraft::ECS::TransformComponentData>(TransformComponentDataIdentifier());
}

inline void FinishTransformComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::TransformComponentData> root) {
  fbb.Finish(root, TransformComponentDataIdentifier());
}

inline void FinishSizePrefixedTransformComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::TransformComponentData> root) {
  fbb.FinishSizePrefixed(root, TransformComponentDataIdentifier());
}

}  // namespace ECS
}  // namespace PixelCraft

#endif  // FLATBUFFERS_GENERATED_TRANSFORMCOMPONENT_PIXELCRAFT_ECS_H_
