// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::common_types_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod pixel_craft {

  use crate::common_types_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod ecs {

  use crate::common_types_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_LIGHT_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_LIGHT_TYPE: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_LIGHT_TYPE: [LightType; 3] = [
  LightType::Directional,
  LightType::Point,
  LightType::Spot,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct LightType(pub i8);
#[allow(non_upper_case_globals)]
impl LightType {
  pub const Directional: Self = Self(0);
  pub const Point: Self = Self(1);
  pub const Spot: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Directional,
    Self::Point,
    Self::Spot,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Directional => Some("Directional"),
      Self::Point => Some("Point"),
      Self::Spot => Some("Spot"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for LightType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for LightType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for LightType {
    type Output = LightType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for LightType {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for LightType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for LightType {}
pub enum LightComponentDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LightComponentData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LightComponentData<'a> {
  type Inner = LightComponentData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LightComponentData<'a> {
  pub const VT_LIGHT_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_COLOR: flatbuffers::VOffsetT = 6;
  pub const VT_INTENSITY: flatbuffers::VOffsetT = 8;
  pub const VT_RANGE: flatbuffers::VOffsetT = 10;
  pub const VT_INNER_ANGLE: flatbuffers::VOffsetT = 12;
  pub const VT_OUTER_ANGLE: flatbuffers::VOffsetT = 14;
  pub const VT_CAST_SHADOWS: flatbuffers::VOffsetT = 16;
  pub const VT_SHADOW_BIAS: flatbuffers::VOffsetT = 18;
  pub const VT_SHADOW_RESOLUTION: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LightComponentData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LightComponentDataArgs<'args>
  ) -> flatbuffers::WIPOffset<LightComponentData<'bldr>> {
    let mut builder = LightComponentDataBuilder::new(_fbb);
    builder.add_shadow_resolution(args.shadow_resolution);
    builder.add_shadow_bias(args.shadow_bias);
    builder.add_outer_angle(args.outer_angle);
    builder.add_inner_angle(args.inner_angle);
    builder.add_range(args.range);
    builder.add_intensity(args.intensity);
    if let Some(x) = args.color { builder.add_color(x); }
    builder.add_cast_shadows(args.cast_shadows);
    builder.add_light_type(args.light_type);
    builder.finish()
  }


  #[inline]
  pub fn light_type(&self) -> LightType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<LightType>(LightComponentData::VT_LIGHT_TYPE, Some(LightType::Directional)).unwrap()}
  }
  #[inline]
  pub fn color(&self) -> Option<&'a Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec3>(LightComponentData::VT_COLOR, None)}
  }
  #[inline]
  pub fn intensity(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(LightComponentData::VT_INTENSITY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn range(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(LightComponentData::VT_RANGE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn inner_angle(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(LightComponentData::VT_INNER_ANGLE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn outer_angle(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(LightComponentData::VT_OUTER_ANGLE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn cast_shadows(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(LightComponentData::VT_CAST_SHADOWS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn shadow_bias(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(LightComponentData::VT_SHADOW_BIAS, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn shadow_resolution(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LightComponentData::VT_SHADOW_RESOLUTION, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for LightComponentData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<LightType>("light_type", Self::VT_LIGHT_TYPE, false)?
     .visit_field::<Vec3>("color", Self::VT_COLOR, false)?
     .visit_field::<f32>("intensity", Self::VT_INTENSITY, false)?
     .visit_field::<f32>("range", Self::VT_RANGE, false)?
     .visit_field::<f32>("inner_angle", Self::VT_INNER_ANGLE, false)?
     .visit_field::<f32>("outer_angle", Self::VT_OUTER_ANGLE, false)?
     .visit_field::<bool>("cast_shadows", Self::VT_CAST_SHADOWS, false)?
     .visit_field::<f32>("shadow_bias", Self::VT_SHADOW_BIAS, false)?
     .visit_field::<i32>("shadow_resolution", Self::VT_SHADOW_RESOLUTION, false)?
     .finish();
    Ok(())
  }
}
pub struct LightComponentDataArgs<'a> {
    pub light_type: LightType,
    pub color: Option<&'a Vec3>,
    pub intensity: f32,
    pub range: f32,
    pub inner_angle: f32,
    pub outer_angle: f32,
    pub cast_shadows: bool,
    pub shadow_bias: f32,
    pub shadow_resolution: i32,
}
impl<'a> Default for LightComponentDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    LightComponentDataArgs {
      light_type: LightType::Directional,
      color: None,
      intensity: 0.0,
      range: 0.0,
      inner_angle: 0.0,
      outer_angle: 0.0,
      cast_shadows: false,
      shadow_bias: 0.0,
      shadow_resolution: 0,
    }
  }
}

pub struct LightComponentDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LightComponentDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_light_type(&mut self, light_type: LightType) {
    self.fbb_.push_slot::<LightType>(LightComponentData::VT_LIGHT_TYPE, light_type, LightType::Directional);
  }
  #[inline]
  pub fn add_color(&mut self, color: &Vec3) {
    self.fbb_.push_slot_always::<&Vec3>(LightComponentData::VT_COLOR, color);
  }
  #[inline]
  pub fn add_intensity(&mut self, intensity: f32) {
    self.fbb_.push_slot::<f32>(LightComponentData::VT_INTENSITY, intensity, 0.0);
  }
  #[inline]
  pub fn add_range(&mut self, range: f32) {
    self.fbb_.push_slot::<f32>(LightComponentData::VT_RANGE, range, 0.0);
  }
  #[inline]
  pub fn add_inner_angle(&mut self, inner_angle: f32) {
    self.fbb_.push_slot::<f32>(LightComponentData::VT_INNER_ANGLE, inner_angle, 0.0);
  }
  #[inline]
  pub fn add_outer_angle(&mut self, outer_angle: f32) {
    self.fbb_.push_slot::<f32>(LightComponentData::VT_OUTER_ANGLE, outer_angle, 0.0);
  }
  #[inline]
  pub fn add_cast_shadows(&mut self, cast_shadows: bool) {
    self.fbb_.push_slot::<bool>(LightComponentData::VT_CAST_SHADOWS, cast_shadows, false);
  }
  #[inline]
  pub fn add_shadow_bias(&mut self, shadow_bias: f32) {
    self.fbb_.push_slot::<f32>(LightComponentData::VT_SHADOW_BIAS, shadow_bias, 0.0);
  }
  #[inline]
  pub fn add_shadow_resolution(&mut self, shadow_resolution: i32) {
    self.fbb_.push_slot::<i32>(LightComponentData::VT_SHADOW_RESOLUTION, shadow_resolution, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LightComponentDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LightComponentDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LightComponentData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LightComponentData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LightComponentData");
      ds.field("light_type", &self.light_type());
      ds.field("color", &self.color());
      ds.field("intensity", &self.intensity());
      ds.field("range", &self.range());
      ds.field("inner_angle", &self.inner_angle());
      ds.field("outer_angle", &self.outer_angle());
      ds.field("cast_shadows", &self.cast_shadows());
      ds.field("shadow_bias", &self.shadow_bias());
      ds.field("shadow_resolution", &self.shadow_resolution());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `LightComponentData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_light_component_data_unchecked`.
pub fn root_as_light_component_data(buf: &[u8]) -> Result<LightComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<LightComponentData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `LightComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_light_component_data_unchecked`.
pub fn size_prefixed_root_as_light_component_data(buf: &[u8]) -> Result<LightComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<LightComponentData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `LightComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_light_component_data_unchecked`.
pub fn root_as_light_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LightComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<LightComponentData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `LightComponentData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_light_component_data_unchecked`.
pub fn size_prefixed_root_as_light_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LightComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<LightComponentData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a LightComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `LightComponentData`.
pub unsafe fn root_as_light_component_data_unchecked(buf: &[u8]) -> LightComponentData {
  flatbuffers::root_unchecked::<LightComponentData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed LightComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `LightComponentData`.
pub unsafe fn size_prefixed_root_as_light_component_data_unchecked(buf: &[u8]) -> LightComponentData {
  flatbuffers::size_prefixed_root_unchecked::<LightComponentData>(buf)
}
pub const LIGHT_COMPONENT_DATA_IDENTIFIER: &str = "LGHT";

#[inline]
pub fn light_component_data_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LIGHT_COMPONENT_DATA_IDENTIFIER, false)
}

#[inline]
pub fn light_component_data_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LIGHT_COMPONENT_DATA_IDENTIFIER, true)
}

#[inline]
pub fn finish_light_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<LightComponentData<'a>>) {
  fbb.finish(root, Some(LIGHT_COMPONENT_DATA_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_light_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<LightComponentData<'a>>) {
  fbb.finish_size_prefixed(root, Some(LIGHT_COMPONENT_DATA_IDENTIFIER));
}
}  // pub mod ECS
}  // pub mod PixelCraft

