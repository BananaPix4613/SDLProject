// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CAMERACOMPONENT_PIXELCRAFT_ECS_H_
#define FLATBUFFERS_GENERATED_CAMERACOMPONENT_PIXELCRAFT_ECS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace PixelCraft {
namespace ECS {

struct CameraComponentData;
struct CameraComponentDataBuilder;

enum CameraType : int8_t {
  CameraType_Perspective = 0,
  CameraType_Orthographic = 1,
  CameraType_MIN = CameraType_Perspective,
  CameraType_MAX = CameraType_Orthographic
};

inline const CameraType (&EnumValuesCameraType())[2] {
  static const CameraType values[] = {
    CameraType_Perspective,
    CameraType_Orthographic
  };
  return values;
}

inline const char * const *EnumNamesCameraType() {
  static const char * const names[3] = {
    "Perspective",
    "Orthographic",
    nullptr
  };
  return names;
}

inline const char *EnumNameCameraType(CameraType e) {
  if (::flatbuffers::IsOutRange(e, CameraType_Perspective, CameraType_Orthographic)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCameraType()[index];
}

struct CameraComponentData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CameraComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CAMERA_TYPE = 4,
    VT_FOV = 6,
    VT_ORTHO_SIZE = 8,
    VT_NEAR_PLANE = 10,
    VT_FAR_PLANE = 12,
    VT_ASPECT_RATIO = 14,
    VT_IS_MAIN = 16
  };
  PixelCraft::ECS::CameraType camera_type() const {
    return static_cast<PixelCraft::ECS::CameraType>(GetField<int8_t>(VT_CAMERA_TYPE, 0));
  }
  float fov() const {
    return GetField<float>(VT_FOV, 0.0f);
  }
  float ortho_size() const {
    return GetField<float>(VT_ORTHO_SIZE, 0.0f);
  }
  float near_plane() const {
    return GetField<float>(VT_NEAR_PLANE, 0.0f);
  }
  float far_plane() const {
    return GetField<float>(VT_FAR_PLANE, 0.0f);
  }
  float aspect_ratio() const {
    return GetField<float>(VT_ASPECT_RATIO, 0.0f);
  }
  bool is_main() const {
    return GetField<uint8_t>(VT_IS_MAIN, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_CAMERA_TYPE, 1) &&
           VerifyField<float>(verifier, VT_FOV, 4) &&
           VerifyField<float>(verifier, VT_ORTHO_SIZE, 4) &&
           VerifyField<float>(verifier, VT_NEAR_PLANE, 4) &&
           VerifyField<float>(verifier, VT_FAR_PLANE, 4) &&
           VerifyField<float>(verifier, VT_ASPECT_RATIO, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_MAIN, 1) &&
           verifier.EndTable();
  }
};

struct CameraComponentDataBuilder {
  typedef CameraComponentData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_camera_type(PixelCraft::ECS::CameraType camera_type) {
    fbb_.AddElement<int8_t>(CameraComponentData::VT_CAMERA_TYPE, static_cast<int8_t>(camera_type), 0);
  }
  void add_fov(float fov) {
    fbb_.AddElement<float>(CameraComponentData::VT_FOV, fov, 0.0f);
  }
  void add_ortho_size(float ortho_size) {
    fbb_.AddElement<float>(CameraComponentData::VT_ORTHO_SIZE, ortho_size, 0.0f);
  }
  void add_near_plane(float near_plane) {
    fbb_.AddElement<float>(CameraComponentData::VT_NEAR_PLANE, near_plane, 0.0f);
  }
  void add_far_plane(float far_plane) {
    fbb_.AddElement<float>(CameraComponentData::VT_FAR_PLANE, far_plane, 0.0f);
  }
  void add_aspect_ratio(float aspect_ratio) {
    fbb_.AddElement<float>(CameraComponentData::VT_ASPECT_RATIO, aspect_ratio, 0.0f);
  }
  void add_is_main(bool is_main) {
    fbb_.AddElement<uint8_t>(CameraComponentData::VT_IS_MAIN, static_cast<uint8_t>(is_main), 0);
  }
  explicit CameraComponentDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CameraComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CameraComponentData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CameraComponentData> CreateCameraComponentData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    PixelCraft::ECS::CameraType camera_type = PixelCraft::ECS::CameraType_Perspective,
    float fov = 0.0f,
    float ortho_size = 0.0f,
    float near_plane = 0.0f,
    float far_plane = 0.0f,
    float aspect_ratio = 0.0f,
    bool is_main = false) {
  CameraComponentDataBuilder builder_(_fbb);
  builder_.add_aspect_ratio(aspect_ratio);
  builder_.add_far_plane(far_plane);
  builder_.add_near_plane(near_plane);
  builder_.add_ortho_size(ortho_size);
  builder_.add_fov(fov);
  builder_.add_is_main(is_main);
  builder_.add_camera_type(camera_type);
  return builder_.Finish();
}

inline const PixelCraft::ECS::CameraComponentData *GetCameraComponentData(const void *buf) {
  return ::flatbuffers::GetRoot<PixelCraft::ECS::CameraComponentData>(buf);
}

inline const PixelCraft::ECS::CameraComponentData *GetSizePrefixedCameraComponentData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PixelCraft::ECS::CameraComponentData>(buf);
}

inline const char *CameraComponentDataIdentifier() {
  return "CAMR";
}

inline bool CameraComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CameraComponentDataIdentifier());
}

inline bool SizePrefixedCameraComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CameraComponentDataIdentifier(), true);
}

inline bool VerifyCameraComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PixelCraft::ECS::CameraComponentData>(CameraComponentDataIdentifier());
}

inline bool VerifySizePrefixedCameraComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PixelCraft::ECS::CameraComponentData>(CameraComponentDataIdentifier());
}

inline void FinishCameraComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::CameraComponentData> root) {
  fbb.Finish(root, CameraComponentDataIdentifier());
}

inline void FinishSizePrefixedCameraComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::CameraComponentData> root) {
  fbb.FinishSizePrefixed(root, CameraComponentDataIdentifier());
}

}  // namespace ECS
}  // namespace PixelCraft

#endif  // FLATBUFFERS_GENERATED_CAMERACOMPONENT_PIXELCRAFT_ECS_H_
