// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod pixel_craft {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod ecs {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum AudioSourceComponentDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AudioSourceComponentData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AudioSourceComponentData<'a> {
  type Inner = AudioSourceComponentData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AudioSourceComponentData<'a> {
  pub const VT_AUDIO_CLIP_PATH: flatbuffers::VOffsetT = 4;
  pub const VT_VOLUME: flatbuffers::VOffsetT = 6;
  pub const VT_PITCH: flatbuffers::VOffsetT = 8;
  pub const VT_LOOP_: flatbuffers::VOffsetT = 10;
  pub const VT_SPATIAL_BLEND: flatbuffers::VOffsetT = 12;
  pub const VT_MIN_DISTANCE: flatbuffers::VOffsetT = 14;
  pub const VT_MAX_DISTANCE: flatbuffers::VOffsetT = 16;
  pub const VT_PLAYING: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AudioSourceComponentData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AudioSourceComponentDataArgs<'args>
  ) -> flatbuffers::WIPOffset<AudioSourceComponentData<'bldr>> {
    let mut builder = AudioSourceComponentDataBuilder::new(_fbb);
    builder.add_max_distance(args.max_distance);
    builder.add_min_distance(args.min_distance);
    builder.add_spatial_blend(args.spatial_blend);
    builder.add_pitch(args.pitch);
    builder.add_volume(args.volume);
    if let Some(x) = args.audio_clip_path { builder.add_audio_clip_path(x); }
    builder.add_playing(args.playing);
    builder.add_loop_(args.loop_);
    builder.finish()
  }


  #[inline]
  pub fn audio_clip_path(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AudioSourceComponentData::VT_AUDIO_CLIP_PATH, None)}
  }
  #[inline]
  pub fn volume(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(AudioSourceComponentData::VT_VOLUME, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn pitch(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(AudioSourceComponentData::VT_PITCH, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn loop_(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AudioSourceComponentData::VT_LOOP_, Some(false)).unwrap()}
  }
  #[inline]
  pub fn spatial_blend(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(AudioSourceComponentData::VT_SPATIAL_BLEND, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn min_distance(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(AudioSourceComponentData::VT_MIN_DISTANCE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn max_distance(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(AudioSourceComponentData::VT_MAX_DISTANCE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn playing(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AudioSourceComponentData::VT_PLAYING, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AudioSourceComponentData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("audio_clip_path", Self::VT_AUDIO_CLIP_PATH, false)?
     .visit_field::<f32>("volume", Self::VT_VOLUME, false)?
     .visit_field::<f32>("pitch", Self::VT_PITCH, false)?
     .visit_field::<bool>("loop_", Self::VT_LOOP_, false)?
     .visit_field::<f32>("spatial_blend", Self::VT_SPATIAL_BLEND, false)?
     .visit_field::<f32>("min_distance", Self::VT_MIN_DISTANCE, false)?
     .visit_field::<f32>("max_distance", Self::VT_MAX_DISTANCE, false)?
     .visit_field::<bool>("playing", Self::VT_PLAYING, false)?
     .finish();
    Ok(())
  }
}
pub struct AudioSourceComponentDataArgs<'a> {
    pub audio_clip_path: Option<flatbuffers::WIPOffset<&'a str>>,
    pub volume: f32,
    pub pitch: f32,
    pub loop_: bool,
    pub spatial_blend: f32,
    pub min_distance: f32,
    pub max_distance: f32,
    pub playing: bool,
}
impl<'a> Default for AudioSourceComponentDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    AudioSourceComponentDataArgs {
      audio_clip_path: None,
      volume: 0.0,
      pitch: 0.0,
      loop_: false,
      spatial_blend: 0.0,
      min_distance: 0.0,
      max_distance: 0.0,
      playing: false,
    }
  }
}

pub struct AudioSourceComponentDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AudioSourceComponentDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_audio_clip_path(&mut self, audio_clip_path: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AudioSourceComponentData::VT_AUDIO_CLIP_PATH, audio_clip_path);
  }
  #[inline]
  pub fn add_volume(&mut self, volume: f32) {
    self.fbb_.push_slot::<f32>(AudioSourceComponentData::VT_VOLUME, volume, 0.0);
  }
  #[inline]
  pub fn add_pitch(&mut self, pitch: f32) {
    self.fbb_.push_slot::<f32>(AudioSourceComponentData::VT_PITCH, pitch, 0.0);
  }
  #[inline]
  pub fn add_loop_(&mut self, loop_: bool) {
    self.fbb_.push_slot::<bool>(AudioSourceComponentData::VT_LOOP_, loop_, false);
  }
  #[inline]
  pub fn add_spatial_blend(&mut self, spatial_blend: f32) {
    self.fbb_.push_slot::<f32>(AudioSourceComponentData::VT_SPATIAL_BLEND, spatial_blend, 0.0);
  }
  #[inline]
  pub fn add_min_distance(&mut self, min_distance: f32) {
    self.fbb_.push_slot::<f32>(AudioSourceComponentData::VT_MIN_DISTANCE, min_distance, 0.0);
  }
  #[inline]
  pub fn add_max_distance(&mut self, max_distance: f32) {
    self.fbb_.push_slot::<f32>(AudioSourceComponentData::VT_MAX_DISTANCE, max_distance, 0.0);
  }
  #[inline]
  pub fn add_playing(&mut self, playing: bool) {
    self.fbb_.push_slot::<bool>(AudioSourceComponentData::VT_PLAYING, playing, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AudioSourceComponentDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AudioSourceComponentDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AudioSourceComponentData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AudioSourceComponentData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AudioSourceComponentData");
      ds.field("audio_clip_path", &self.audio_clip_path());
      ds.field("volume", &self.volume());
      ds.field("pitch", &self.pitch());
      ds.field("loop_", &self.loop_());
      ds.field("spatial_blend", &self.spatial_blend());
      ds.field("min_distance", &self.min_distance());
      ds.field("max_distance", &self.max_distance());
      ds.field("playing", &self.playing());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AudioSourceComponentData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_audio_source_component_data_unchecked`.
pub fn root_as_audio_source_component_data(buf: &[u8]) -> Result<AudioSourceComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AudioSourceComponentData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AudioSourceComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_audio_source_component_data_unchecked`.
pub fn size_prefixed_root_as_audio_source_component_data(buf: &[u8]) -> Result<AudioSourceComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AudioSourceComponentData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AudioSourceComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_audio_source_component_data_unchecked`.
pub fn root_as_audio_source_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AudioSourceComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AudioSourceComponentData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AudioSourceComponentData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_audio_source_component_data_unchecked`.
pub fn size_prefixed_root_as_audio_source_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AudioSourceComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AudioSourceComponentData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AudioSourceComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AudioSourceComponentData`.
pub unsafe fn root_as_audio_source_component_data_unchecked(buf: &[u8]) -> AudioSourceComponentData {
  flatbuffers::root_unchecked::<AudioSourceComponentData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AudioSourceComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AudioSourceComponentData`.
pub unsafe fn size_prefixed_root_as_audio_source_component_data_unchecked(buf: &[u8]) -> AudioSourceComponentData {
  flatbuffers::size_prefixed_root_unchecked::<AudioSourceComponentData>(buf)
}
pub const AUDIO_SOURCE_COMPONENT_DATA_IDENTIFIER: &str = "AUDS";

#[inline]
pub fn audio_source_component_data_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AUDIO_SOURCE_COMPONENT_DATA_IDENTIFIER, false)
}

#[inline]
pub fn audio_source_component_data_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AUDIO_SOURCE_COMPONENT_DATA_IDENTIFIER, true)
}

#[inline]
pub fn finish_audio_source_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AudioSourceComponentData<'a>>) {
  fbb.finish(root, Some(AUDIO_SOURCE_COMPONENT_DATA_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_audio_source_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AudioSourceComponentData<'a>>) {
  fbb.finish_size_prefixed(root, Some(AUDIO_SOURCE_COMPONENT_DATA_IDENTIFIER));
}
}  // pub mod ECS
}  // pub mod PixelCraft

