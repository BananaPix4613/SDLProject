// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PARTICLESYSTEMCOMPONENT_PIXELCRAFT_ECS_H_
#define FLATBUFFERS_GENERATED_PARTICLESYSTEMCOMPONENT_PIXELCRAFT_ECS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "common_types_generated.h"

namespace PixelCraft {
namespace ECS {

struct ParticleSystemComponentData;
struct ParticleSystemComponentDataBuilder;

struct ParticleSystemComponentData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ParticleSystemComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAX_PARTICLES = 4,
    VT_EMISSION_RATE = 6,
    VT_LIFETIME = 8,
    VT_START_SPEED = 10,
    VT_START_SIZE = 12,
    VT_START_COLOR = 14,
    VT_GRAVITY_MODIFIER = 16,
    VT_SIMULATION_SPACE = 18,
    VT_TEXTURE_PATH = 20
  };
  int32_t max_particles() const {
    return GetField<int32_t>(VT_MAX_PARTICLES, 0);
  }
  float emission_rate() const {
    return GetField<float>(VT_EMISSION_RATE, 0.0f);
  }
  float lifetime() const {
    return GetField<float>(VT_LIFETIME, 0.0f);
  }
  float start_speed() const {
    return GetField<float>(VT_START_SPEED, 0.0f);
  }
  float start_size() const {
    return GetField<float>(VT_START_SIZE, 0.0f);
  }
  const PixelCraft::ECS::Vec3 *start_color() const {
    return GetStruct<const PixelCraft::ECS::Vec3 *>(VT_START_COLOR);
  }
  float gravity_modifier() const {
    return GetField<float>(VT_GRAVITY_MODIFIER, 0.0f);
  }
  bool simulation_space() const {
    return GetField<uint8_t>(VT_SIMULATION_SPACE, 0) != 0;
  }
  const ::flatbuffers::String *texture_path() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXTURE_PATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MAX_PARTICLES, 4) &&
           VerifyField<float>(verifier, VT_EMISSION_RATE, 4) &&
           VerifyField<float>(verifier, VT_LIFETIME, 4) &&
           VerifyField<float>(verifier, VT_START_SPEED, 4) &&
           VerifyField<float>(verifier, VT_START_SIZE, 4) &&
           VerifyField<PixelCraft::ECS::Vec3>(verifier, VT_START_COLOR, 4) &&
           VerifyField<float>(verifier, VT_GRAVITY_MODIFIER, 4) &&
           VerifyField<uint8_t>(verifier, VT_SIMULATION_SPACE, 1) &&
           VerifyOffset(verifier, VT_TEXTURE_PATH) &&
           verifier.VerifyString(texture_path()) &&
           verifier.EndTable();
  }
};

struct ParticleSystemComponentDataBuilder {
  typedef ParticleSystemComponentData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_max_particles(int32_t max_particles) {
    fbb_.AddElement<int32_t>(ParticleSystemComponentData::VT_MAX_PARTICLES, max_particles, 0);
  }
  void add_emission_rate(float emission_rate) {
    fbb_.AddElement<float>(ParticleSystemComponentData::VT_EMISSION_RATE, emission_rate, 0.0f);
  }
  void add_lifetime(float lifetime) {
    fbb_.AddElement<float>(ParticleSystemComponentData::VT_LIFETIME, lifetime, 0.0f);
  }
  void add_start_speed(float start_speed) {
    fbb_.AddElement<float>(ParticleSystemComponentData::VT_START_SPEED, start_speed, 0.0f);
  }
  void add_start_size(float start_size) {
    fbb_.AddElement<float>(ParticleSystemComponentData::VT_START_SIZE, start_size, 0.0f);
  }
  void add_start_color(const PixelCraft::ECS::Vec3 *start_color) {
    fbb_.AddStruct(ParticleSystemComponentData::VT_START_COLOR, start_color);
  }
  void add_gravity_modifier(float gravity_modifier) {
    fbb_.AddElement<float>(ParticleSystemComponentData::VT_GRAVITY_MODIFIER, gravity_modifier, 0.0f);
  }
  void add_simulation_space(bool simulation_space) {
    fbb_.AddElement<uint8_t>(ParticleSystemComponentData::VT_SIMULATION_SPACE, static_cast<uint8_t>(simulation_space), 0);
  }
  void add_texture_path(::flatbuffers::Offset<::flatbuffers::String> texture_path) {
    fbb_.AddOffset(ParticleSystemComponentData::VT_TEXTURE_PATH, texture_path);
  }
  explicit ParticleSystemComponentDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ParticleSystemComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ParticleSystemComponentData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ParticleSystemComponentData> CreateParticleSystemComponentData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t max_particles = 0,
    float emission_rate = 0.0f,
    float lifetime = 0.0f,
    float start_speed = 0.0f,
    float start_size = 0.0f,
    const PixelCraft::ECS::Vec3 *start_color = nullptr,
    float gravity_modifier = 0.0f,
    bool simulation_space = false,
    ::flatbuffers::Offset<::flatbuffers::String> texture_path = 0) {
  ParticleSystemComponentDataBuilder builder_(_fbb);
  builder_.add_texture_path(texture_path);
  builder_.add_gravity_modifier(gravity_modifier);
  builder_.add_start_color(start_color);
  builder_.add_start_size(start_size);
  builder_.add_start_speed(start_speed);
  builder_.add_lifetime(lifetime);
  builder_.add_emission_rate(emission_rate);
  builder_.add_max_particles(max_particles);
  builder_.add_simulation_space(simulation_space);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ParticleSystemComponentData> CreateParticleSystemComponentDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t max_particles = 0,
    float emission_rate = 0.0f,
    float lifetime = 0.0f,
    float start_speed = 0.0f,
    float start_size = 0.0f,
    const PixelCraft::ECS::Vec3 *start_color = nullptr,
    float gravity_modifier = 0.0f,
    bool simulation_space = false,
    const char *texture_path = nullptr) {
  auto texture_path__ = texture_path ? _fbb.CreateString(texture_path) : 0;
  return PixelCraft::ECS::CreateParticleSystemComponentData(
      _fbb,
      max_particles,
      emission_rate,
      lifetime,
      start_speed,
      start_size,
      start_color,
      gravity_modifier,
      simulation_space,
      texture_path__);
}

inline const PixelCraft::ECS::ParticleSystemComponentData *GetParticleSystemComponentData(const void *buf) {
  return ::flatbuffers::GetRoot<PixelCraft::ECS::ParticleSystemComponentData>(buf);
}

inline const PixelCraft::ECS::ParticleSystemComponentData *GetSizePrefixedParticleSystemComponentData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PixelCraft::ECS::ParticleSystemComponentData>(buf);
}

inline const char *ParticleSystemComponentDataIdentifier() {
  return "PRTC";
}

inline bool ParticleSystemComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ParticleSystemComponentDataIdentifier());
}

inline bool SizePrefixedParticleSystemComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ParticleSystemComponentDataIdentifier(), true);
}

inline bool VerifyParticleSystemComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PixelCraft::ECS::ParticleSystemComponentData>(ParticleSystemComponentDataIdentifier());
}

inline bool VerifySizePrefixedParticleSystemComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PixelCraft::ECS::ParticleSystemComponentData>(ParticleSystemComponentDataIdentifier());
}

inline void FinishParticleSystemComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::ParticleSystemComponentData> root) {
  fbb.Finish(root, ParticleSystemComponentDataIdentifier());
}

inline void FinishSizePrefixedParticleSystemComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::ParticleSystemComponentData> root) {
  fbb.FinishSizePrefixed(root, ParticleSystemComponentDataIdentifier());
}

}  // namespace ECS
}  // namespace PixelCraft

#endif  // FLATBUFFERS_GENERATED_PARTICLESYSTEMCOMPONENT_PIXELCRAFT_ECS_H_
