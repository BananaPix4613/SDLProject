// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::common_types_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod pixel_craft {

  use crate::common_types_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod ecs {

  use crate::common_types_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_BODY_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_BODY_TYPE: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_BODY_TYPE: [BodyType; 3] = [
  BodyType::Static,
  BodyType::Kinematic,
  BodyType::Dynamic,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct BodyType(pub i8);
#[allow(non_upper_case_globals)]
impl BodyType {
  pub const Static: Self = Self(0);
  pub const Kinematic: Self = Self(1);
  pub const Dynamic: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Static,
    Self::Kinematic,
    Self::Dynamic,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Static => Some("Static"),
      Self::Kinematic => Some("Kinematic"),
      Self::Dynamic => Some("Dynamic"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for BodyType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for BodyType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for BodyType {
    type Output = BodyType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for BodyType {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for BodyType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for BodyType {}
pub enum RigidBodyComponentDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RigidBodyComponentData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RigidBodyComponentData<'a> {
  type Inner = RigidBodyComponentData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RigidBodyComponentData<'a> {
  pub const VT_BODY_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_MASS: flatbuffers::VOffsetT = 6;
  pub const VT_DRAG: flatbuffers::VOffsetT = 8;
  pub const VT_ANGULAR_DRAG: flatbuffers::VOffsetT = 10;
  pub const VT_USE_GRAVITY: flatbuffers::VOffsetT = 12;
  pub const VT_IS_KINEMATIC: flatbuffers::VOffsetT = 14;
  pub const VT_LINEAR_VELOCITY: flatbuffers::VOffsetT = 16;
  pub const VT_ANGULAR_VELOCITY: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RigidBodyComponentData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RigidBodyComponentDataArgs<'args>
  ) -> flatbuffers::WIPOffset<RigidBodyComponentData<'bldr>> {
    let mut builder = RigidBodyComponentDataBuilder::new(_fbb);
    if let Some(x) = args.angular_velocity { builder.add_angular_velocity(x); }
    if let Some(x) = args.linear_velocity { builder.add_linear_velocity(x); }
    builder.add_angular_drag(args.angular_drag);
    builder.add_drag(args.drag);
    builder.add_mass(args.mass);
    builder.add_is_kinematic(args.is_kinematic);
    builder.add_use_gravity(args.use_gravity);
    builder.add_body_type(args.body_type);
    builder.finish()
  }


  #[inline]
  pub fn body_type(&self) -> BodyType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<BodyType>(RigidBodyComponentData::VT_BODY_TYPE, Some(BodyType::Static)).unwrap()}
  }
  #[inline]
  pub fn mass(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(RigidBodyComponentData::VT_MASS, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn drag(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(RigidBodyComponentData::VT_DRAG, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn angular_drag(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(RigidBodyComponentData::VT_ANGULAR_DRAG, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn use_gravity(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(RigidBodyComponentData::VT_USE_GRAVITY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn is_kinematic(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(RigidBodyComponentData::VT_IS_KINEMATIC, Some(false)).unwrap()}
  }
  #[inline]
  pub fn linear_velocity(&self) -> Option<&'a Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec3>(RigidBodyComponentData::VT_LINEAR_VELOCITY, None)}
  }
  #[inline]
  pub fn angular_velocity(&self) -> Option<&'a Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec3>(RigidBodyComponentData::VT_ANGULAR_VELOCITY, None)}
  }
}

impl flatbuffers::Verifiable for RigidBodyComponentData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<BodyType>("body_type", Self::VT_BODY_TYPE, false)?
     .visit_field::<f32>("mass", Self::VT_MASS, false)?
     .visit_field::<f32>("drag", Self::VT_DRAG, false)?
     .visit_field::<f32>("angular_drag", Self::VT_ANGULAR_DRAG, false)?
     .visit_field::<bool>("use_gravity", Self::VT_USE_GRAVITY, false)?
     .visit_field::<bool>("is_kinematic", Self::VT_IS_KINEMATIC, false)?
     .visit_field::<Vec3>("linear_velocity", Self::VT_LINEAR_VELOCITY, false)?
     .visit_field::<Vec3>("angular_velocity", Self::VT_ANGULAR_VELOCITY, false)?
     .finish();
    Ok(())
  }
}
pub struct RigidBodyComponentDataArgs<'a> {
    pub body_type: BodyType,
    pub mass: f32,
    pub drag: f32,
    pub angular_drag: f32,
    pub use_gravity: bool,
    pub is_kinematic: bool,
    pub linear_velocity: Option<&'a Vec3>,
    pub angular_velocity: Option<&'a Vec3>,
}
impl<'a> Default for RigidBodyComponentDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    RigidBodyComponentDataArgs {
      body_type: BodyType::Static,
      mass: 0.0,
      drag: 0.0,
      angular_drag: 0.0,
      use_gravity: false,
      is_kinematic: false,
      linear_velocity: None,
      angular_velocity: None,
    }
  }
}

pub struct RigidBodyComponentDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RigidBodyComponentDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_body_type(&mut self, body_type: BodyType) {
    self.fbb_.push_slot::<BodyType>(RigidBodyComponentData::VT_BODY_TYPE, body_type, BodyType::Static);
  }
  #[inline]
  pub fn add_mass(&mut self, mass: f32) {
    self.fbb_.push_slot::<f32>(RigidBodyComponentData::VT_MASS, mass, 0.0);
  }
  #[inline]
  pub fn add_drag(&mut self, drag: f32) {
    self.fbb_.push_slot::<f32>(RigidBodyComponentData::VT_DRAG, drag, 0.0);
  }
  #[inline]
  pub fn add_angular_drag(&mut self, angular_drag: f32) {
    self.fbb_.push_slot::<f32>(RigidBodyComponentData::VT_ANGULAR_DRAG, angular_drag, 0.0);
  }
  #[inline]
  pub fn add_use_gravity(&mut self, use_gravity: bool) {
    self.fbb_.push_slot::<bool>(RigidBodyComponentData::VT_USE_GRAVITY, use_gravity, false);
  }
  #[inline]
  pub fn add_is_kinematic(&mut self, is_kinematic: bool) {
    self.fbb_.push_slot::<bool>(RigidBodyComponentData::VT_IS_KINEMATIC, is_kinematic, false);
  }
  #[inline]
  pub fn add_linear_velocity(&mut self, linear_velocity: &Vec3) {
    self.fbb_.push_slot_always::<&Vec3>(RigidBodyComponentData::VT_LINEAR_VELOCITY, linear_velocity);
  }
  #[inline]
  pub fn add_angular_velocity(&mut self, angular_velocity: &Vec3) {
    self.fbb_.push_slot_always::<&Vec3>(RigidBodyComponentData::VT_ANGULAR_VELOCITY, angular_velocity);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RigidBodyComponentDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RigidBodyComponentDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RigidBodyComponentData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RigidBodyComponentData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RigidBodyComponentData");
      ds.field("body_type", &self.body_type());
      ds.field("mass", &self.mass());
      ds.field("drag", &self.drag());
      ds.field("angular_drag", &self.angular_drag());
      ds.field("use_gravity", &self.use_gravity());
      ds.field("is_kinematic", &self.is_kinematic());
      ds.field("linear_velocity", &self.linear_velocity());
      ds.field("angular_velocity", &self.angular_velocity());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `RigidBodyComponentData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rigid_body_component_data_unchecked`.
pub fn root_as_rigid_body_component_data(buf: &[u8]) -> Result<RigidBodyComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<RigidBodyComponentData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RigidBodyComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_rigid_body_component_data_unchecked`.
pub fn size_prefixed_root_as_rigid_body_component_data(buf: &[u8]) -> Result<RigidBodyComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<RigidBodyComponentData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RigidBodyComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rigid_body_component_data_unchecked`.
pub fn root_as_rigid_body_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RigidBodyComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<RigidBodyComponentData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RigidBodyComponentData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rigid_body_component_data_unchecked`.
pub fn size_prefixed_root_as_rigid_body_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RigidBodyComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<RigidBodyComponentData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RigidBodyComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RigidBodyComponentData`.
pub unsafe fn root_as_rigid_body_component_data_unchecked(buf: &[u8]) -> RigidBodyComponentData {
  flatbuffers::root_unchecked::<RigidBodyComponentData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RigidBodyComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RigidBodyComponentData`.
pub unsafe fn size_prefixed_root_as_rigid_body_component_data_unchecked(buf: &[u8]) -> RigidBodyComponentData {
  flatbuffers::size_prefixed_root_unchecked::<RigidBodyComponentData>(buf)
}
pub const RIGID_BODY_COMPONENT_DATA_IDENTIFIER: &str = "RGBD";

#[inline]
pub fn rigid_body_component_data_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RIGID_BODY_COMPONENT_DATA_IDENTIFIER, false)
}

#[inline]
pub fn rigid_body_component_data_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RIGID_BODY_COMPONENT_DATA_IDENTIFIER, true)
}

#[inline]
pub fn finish_rigid_body_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<RigidBodyComponentData<'a>>) {
  fbb.finish(root, Some(RIGID_BODY_COMPONENT_DATA_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_rigid_body_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<RigidBodyComponentData<'a>>) {
  fbb.finish_size_prefixed(root, Some(RIGID_BODY_COMPONENT_DATA_IDENTIFIER));
}
}  // pub mod ECS
}  // pub mod PixelCraft

