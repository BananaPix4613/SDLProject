// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod pixel_craft {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod ecs {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_CAMERA_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_CAMERA_TYPE: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_CAMERA_TYPE: [CameraType; 2] = [
  CameraType::Perspective,
  CameraType::Orthographic,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct CameraType(pub i8);
#[allow(non_upper_case_globals)]
impl CameraType {
  pub const Perspective: Self = Self(0);
  pub const Orthographic: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Perspective,
    Self::Orthographic,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Perspective => Some("Perspective"),
      Self::Orthographic => Some("Orthographic"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for CameraType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for CameraType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for CameraType {
    type Output = CameraType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for CameraType {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for CameraType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for CameraType {}
pub enum CameraComponentDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CameraComponentData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CameraComponentData<'a> {
  type Inner = CameraComponentData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CameraComponentData<'a> {
  pub const VT_CAMERA_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_FOV: flatbuffers::VOffsetT = 6;
  pub const VT_ORTHO_SIZE: flatbuffers::VOffsetT = 8;
  pub const VT_NEAR_PLANE: flatbuffers::VOffsetT = 10;
  pub const VT_FAR_PLANE: flatbuffers::VOffsetT = 12;
  pub const VT_ASPECT_RATIO: flatbuffers::VOffsetT = 14;
  pub const VT_IS_MAIN: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CameraComponentData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CameraComponentDataArgs
  ) -> flatbuffers::WIPOffset<CameraComponentData<'bldr>> {
    let mut builder = CameraComponentDataBuilder::new(_fbb);
    builder.add_aspect_ratio(args.aspect_ratio);
    builder.add_far_plane(args.far_plane);
    builder.add_near_plane(args.near_plane);
    builder.add_ortho_size(args.ortho_size);
    builder.add_fov(args.fov);
    builder.add_is_main(args.is_main);
    builder.add_camera_type(args.camera_type);
    builder.finish()
  }


  #[inline]
  pub fn camera_type(&self) -> CameraType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CameraType>(CameraComponentData::VT_CAMERA_TYPE, Some(CameraType::Perspective)).unwrap()}
  }
  #[inline]
  pub fn fov(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CameraComponentData::VT_FOV, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ortho_size(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CameraComponentData::VT_ORTHO_SIZE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn near_plane(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CameraComponentData::VT_NEAR_PLANE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn far_plane(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CameraComponentData::VT_FAR_PLANE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn aspect_ratio(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CameraComponentData::VT_ASPECT_RATIO, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn is_main(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CameraComponentData::VT_IS_MAIN, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CameraComponentData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<CameraType>("camera_type", Self::VT_CAMERA_TYPE, false)?
     .visit_field::<f32>("fov", Self::VT_FOV, false)?
     .visit_field::<f32>("ortho_size", Self::VT_ORTHO_SIZE, false)?
     .visit_field::<f32>("near_plane", Self::VT_NEAR_PLANE, false)?
     .visit_field::<f32>("far_plane", Self::VT_FAR_PLANE, false)?
     .visit_field::<f32>("aspect_ratio", Self::VT_ASPECT_RATIO, false)?
     .visit_field::<bool>("is_main", Self::VT_IS_MAIN, false)?
     .finish();
    Ok(())
  }
}
pub struct CameraComponentDataArgs {
    pub camera_type: CameraType,
    pub fov: f32,
    pub ortho_size: f32,
    pub near_plane: f32,
    pub far_plane: f32,
    pub aspect_ratio: f32,
    pub is_main: bool,
}
impl<'a> Default for CameraComponentDataArgs {
  #[inline]
  fn default() -> Self {
    CameraComponentDataArgs {
      camera_type: CameraType::Perspective,
      fov: 0.0,
      ortho_size: 0.0,
      near_plane: 0.0,
      far_plane: 0.0,
      aspect_ratio: 0.0,
      is_main: false,
    }
  }
}

pub struct CameraComponentDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CameraComponentDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_camera_type(&mut self, camera_type: CameraType) {
    self.fbb_.push_slot::<CameraType>(CameraComponentData::VT_CAMERA_TYPE, camera_type, CameraType::Perspective);
  }
  #[inline]
  pub fn add_fov(&mut self, fov: f32) {
    self.fbb_.push_slot::<f32>(CameraComponentData::VT_FOV, fov, 0.0);
  }
  #[inline]
  pub fn add_ortho_size(&mut self, ortho_size: f32) {
    self.fbb_.push_slot::<f32>(CameraComponentData::VT_ORTHO_SIZE, ortho_size, 0.0);
  }
  #[inline]
  pub fn add_near_plane(&mut self, near_plane: f32) {
    self.fbb_.push_slot::<f32>(CameraComponentData::VT_NEAR_PLANE, near_plane, 0.0);
  }
  #[inline]
  pub fn add_far_plane(&mut self, far_plane: f32) {
    self.fbb_.push_slot::<f32>(CameraComponentData::VT_FAR_PLANE, far_plane, 0.0);
  }
  #[inline]
  pub fn add_aspect_ratio(&mut self, aspect_ratio: f32) {
    self.fbb_.push_slot::<f32>(CameraComponentData::VT_ASPECT_RATIO, aspect_ratio, 0.0);
  }
  #[inline]
  pub fn add_is_main(&mut self, is_main: bool) {
    self.fbb_.push_slot::<bool>(CameraComponentData::VT_IS_MAIN, is_main, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CameraComponentDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CameraComponentDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CameraComponentData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CameraComponentData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CameraComponentData");
      ds.field("camera_type", &self.camera_type());
      ds.field("fov", &self.fov());
      ds.field("ortho_size", &self.ortho_size());
      ds.field("near_plane", &self.near_plane());
      ds.field("far_plane", &self.far_plane());
      ds.field("aspect_ratio", &self.aspect_ratio());
      ds.field("is_main", &self.is_main());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `CameraComponentData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_camera_component_data_unchecked`.
pub fn root_as_camera_component_data(buf: &[u8]) -> Result<CameraComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<CameraComponentData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `CameraComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_camera_component_data_unchecked`.
pub fn size_prefixed_root_as_camera_component_data(buf: &[u8]) -> Result<CameraComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<CameraComponentData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `CameraComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_camera_component_data_unchecked`.
pub fn root_as_camera_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CameraComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<CameraComponentData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `CameraComponentData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_camera_component_data_unchecked`.
pub fn size_prefixed_root_as_camera_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CameraComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<CameraComponentData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a CameraComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `CameraComponentData`.
pub unsafe fn root_as_camera_component_data_unchecked(buf: &[u8]) -> CameraComponentData {
  flatbuffers::root_unchecked::<CameraComponentData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed CameraComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `CameraComponentData`.
pub unsafe fn size_prefixed_root_as_camera_component_data_unchecked(buf: &[u8]) -> CameraComponentData {
  flatbuffers::size_prefixed_root_unchecked::<CameraComponentData>(buf)
}
pub const CAMERA_COMPONENT_DATA_IDENTIFIER: &str = "CAMR";

#[inline]
pub fn camera_component_data_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, CAMERA_COMPONENT_DATA_IDENTIFIER, false)
}

#[inline]
pub fn camera_component_data_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, CAMERA_COMPONENT_DATA_IDENTIFIER, true)
}

#[inline]
pub fn finish_camera_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<CameraComponentData<'a>>) {
  fbb.finish(root, Some(CAMERA_COMPONENT_DATA_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_camera_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<CameraComponentData<'a>>) {
  fbb.finish_size_prefixed(root, Some(CAMERA_COMPONENT_DATA_IDENTIFIER));
}
}  // pub mod ECS
}  // pub mod PixelCraft

