// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUDIOSOURCECOMPONENT_PIXELCRAFT_ECS_H_
#define FLATBUFFERS_GENERATED_AUDIOSOURCECOMPONENT_PIXELCRAFT_ECS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace PixelCraft {
namespace ECS {

struct AudioSourceComponentData;
struct AudioSourceComponentDataBuilder;

struct AudioSourceComponentData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AudioSourceComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AUDIO_CLIP_PATH = 4,
    VT_VOLUME = 6,
    VT_PITCH = 8,
    VT_LOOP = 10,
    VT_SPATIAL_BLEND = 12,
    VT_MIN_DISTANCE = 14,
    VT_MAX_DISTANCE = 16,
    VT_PLAYING = 18
  };
  const ::flatbuffers::String *audio_clip_path() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AUDIO_CLIP_PATH);
  }
  float volume() const {
    return GetField<float>(VT_VOLUME, 0.0f);
  }
  float pitch() const {
    return GetField<float>(VT_PITCH, 0.0f);
  }
  bool loop() const {
    return GetField<uint8_t>(VT_LOOP, 0) != 0;
  }
  float spatial_blend() const {
    return GetField<float>(VT_SPATIAL_BLEND, 0.0f);
  }
  float min_distance() const {
    return GetField<float>(VT_MIN_DISTANCE, 0.0f);
  }
  float max_distance() const {
    return GetField<float>(VT_MAX_DISTANCE, 0.0f);
  }
  bool playing() const {
    return GetField<uint8_t>(VT_PLAYING, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AUDIO_CLIP_PATH) &&
           verifier.VerifyString(audio_clip_path()) &&
           VerifyField<float>(verifier, VT_VOLUME, 4) &&
           VerifyField<float>(verifier, VT_PITCH, 4) &&
           VerifyField<uint8_t>(verifier, VT_LOOP, 1) &&
           VerifyField<float>(verifier, VT_SPATIAL_BLEND, 4) &&
           VerifyField<float>(verifier, VT_MIN_DISTANCE, 4) &&
           VerifyField<float>(verifier, VT_MAX_DISTANCE, 4) &&
           VerifyField<uint8_t>(verifier, VT_PLAYING, 1) &&
           verifier.EndTable();
  }
};

struct AudioSourceComponentDataBuilder {
  typedef AudioSourceComponentData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_audio_clip_path(::flatbuffers::Offset<::flatbuffers::String> audio_clip_path) {
    fbb_.AddOffset(AudioSourceComponentData::VT_AUDIO_CLIP_PATH, audio_clip_path);
  }
  void add_volume(float volume) {
    fbb_.AddElement<float>(AudioSourceComponentData::VT_VOLUME, volume, 0.0f);
  }
  void add_pitch(float pitch) {
    fbb_.AddElement<float>(AudioSourceComponentData::VT_PITCH, pitch, 0.0f);
  }
  void add_loop(bool loop) {
    fbb_.AddElement<uint8_t>(AudioSourceComponentData::VT_LOOP, static_cast<uint8_t>(loop), 0);
  }
  void add_spatial_blend(float spatial_blend) {
    fbb_.AddElement<float>(AudioSourceComponentData::VT_SPATIAL_BLEND, spatial_blend, 0.0f);
  }
  void add_min_distance(float min_distance) {
    fbb_.AddElement<float>(AudioSourceComponentData::VT_MIN_DISTANCE, min_distance, 0.0f);
  }
  void add_max_distance(float max_distance) {
    fbb_.AddElement<float>(AudioSourceComponentData::VT_MAX_DISTANCE, max_distance, 0.0f);
  }
  void add_playing(bool playing) {
    fbb_.AddElement<uint8_t>(AudioSourceComponentData::VT_PLAYING, static_cast<uint8_t>(playing), 0);
  }
  explicit AudioSourceComponentDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AudioSourceComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AudioSourceComponentData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AudioSourceComponentData> CreateAudioSourceComponentData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> audio_clip_path = 0,
    float volume = 0.0f,
    float pitch = 0.0f,
    bool loop = false,
    float spatial_blend = 0.0f,
    float min_distance = 0.0f,
    float max_distance = 0.0f,
    bool playing = false) {
  AudioSourceComponentDataBuilder builder_(_fbb);
  builder_.add_max_distance(max_distance);
  builder_.add_min_distance(min_distance);
  builder_.add_spatial_blend(spatial_blend);
  builder_.add_pitch(pitch);
  builder_.add_volume(volume);
  builder_.add_audio_clip_path(audio_clip_path);
  builder_.add_playing(playing);
  builder_.add_loop(loop);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AudioSourceComponentData> CreateAudioSourceComponentDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *audio_clip_path = nullptr,
    float volume = 0.0f,
    float pitch = 0.0f,
    bool loop = false,
    float spatial_blend = 0.0f,
    float min_distance = 0.0f,
    float max_distance = 0.0f,
    bool playing = false) {
  auto audio_clip_path__ = audio_clip_path ? _fbb.CreateString(audio_clip_path) : 0;
  return PixelCraft::ECS::CreateAudioSourceComponentData(
      _fbb,
      audio_clip_path__,
      volume,
      pitch,
      loop,
      spatial_blend,
      min_distance,
      max_distance,
      playing);
}

inline const PixelCraft::ECS::AudioSourceComponentData *GetAudioSourceComponentData(const void *buf) {
  return ::flatbuffers::GetRoot<PixelCraft::ECS::AudioSourceComponentData>(buf);
}

inline const PixelCraft::ECS::AudioSourceComponentData *GetSizePrefixedAudioSourceComponentData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PixelCraft::ECS::AudioSourceComponentData>(buf);
}

inline const char *AudioSourceComponentDataIdentifier() {
  return "AUDS";
}

inline bool AudioSourceComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AudioSourceComponentDataIdentifier());
}

inline bool SizePrefixedAudioSourceComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AudioSourceComponentDataIdentifier(), true);
}

inline bool VerifyAudioSourceComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PixelCraft::ECS::AudioSourceComponentData>(AudioSourceComponentDataIdentifier());
}

inline bool VerifySizePrefixedAudioSourceComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PixelCraft::ECS::AudioSourceComponentData>(AudioSourceComponentDataIdentifier());
}

inline void FinishAudioSourceComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::AudioSourceComponentData> root) {
  fbb.Finish(root, AudioSourceComponentDataIdentifier());
}

inline void FinishSizePrefixedAudioSourceComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::AudioSourceComponentData> root) {
  fbb.FinishSizePrefixed(root, AudioSourceComponentDataIdentifier());
}

}  // namespace ECS
}  // namespace PixelCraft

#endif  // FLATBUFFERS_GENERATED_AUDIOSOURCECOMPONENT_PIXELCRAFT_ECS_H_
