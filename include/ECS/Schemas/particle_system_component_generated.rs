// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::common_types_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod pixel_craft {

  use crate::common_types_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod ecs {

  use crate::common_types_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum ParticleSystemComponentDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ParticleSystemComponentData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ParticleSystemComponentData<'a> {
  type Inner = ParticleSystemComponentData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ParticleSystemComponentData<'a> {
  pub const VT_MAX_PARTICLES: flatbuffers::VOffsetT = 4;
  pub const VT_EMISSION_RATE: flatbuffers::VOffsetT = 6;
  pub const VT_LIFETIME: flatbuffers::VOffsetT = 8;
  pub const VT_START_SPEED: flatbuffers::VOffsetT = 10;
  pub const VT_START_SIZE: flatbuffers::VOffsetT = 12;
  pub const VT_START_COLOR: flatbuffers::VOffsetT = 14;
  pub const VT_GRAVITY_MODIFIER: flatbuffers::VOffsetT = 16;
  pub const VT_SIMULATION_SPACE: flatbuffers::VOffsetT = 18;
  pub const VT_TEXTURE_PATH: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ParticleSystemComponentData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ParticleSystemComponentDataArgs<'args>
  ) -> flatbuffers::WIPOffset<ParticleSystemComponentData<'bldr>> {
    let mut builder = ParticleSystemComponentDataBuilder::new(_fbb);
    if let Some(x) = args.texture_path { builder.add_texture_path(x); }
    builder.add_gravity_modifier(args.gravity_modifier);
    if let Some(x) = args.start_color { builder.add_start_color(x); }
    builder.add_start_size(args.start_size);
    builder.add_start_speed(args.start_speed);
    builder.add_lifetime(args.lifetime);
    builder.add_emission_rate(args.emission_rate);
    builder.add_max_particles(args.max_particles);
    builder.add_simulation_space(args.simulation_space);
    builder.finish()
  }


  #[inline]
  pub fn max_particles(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ParticleSystemComponentData::VT_MAX_PARTICLES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn emission_rate(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ParticleSystemComponentData::VT_EMISSION_RATE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn lifetime(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ParticleSystemComponentData::VT_LIFETIME, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn start_speed(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ParticleSystemComponentData::VT_START_SPEED, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn start_size(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ParticleSystemComponentData::VT_START_SIZE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn start_color(&self) -> Option<&'a Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec3>(ParticleSystemComponentData::VT_START_COLOR, None)}
  }
  #[inline]
  pub fn gravity_modifier(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ParticleSystemComponentData::VT_GRAVITY_MODIFIER, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn simulation_space(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ParticleSystemComponentData::VT_SIMULATION_SPACE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn texture_path(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ParticleSystemComponentData::VT_TEXTURE_PATH, None)}
  }
}

impl flatbuffers::Verifiable for ParticleSystemComponentData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("max_particles", Self::VT_MAX_PARTICLES, false)?
     .visit_field::<f32>("emission_rate", Self::VT_EMISSION_RATE, false)?
     .visit_field::<f32>("lifetime", Self::VT_LIFETIME, false)?
     .visit_field::<f32>("start_speed", Self::VT_START_SPEED, false)?
     .visit_field::<f32>("start_size", Self::VT_START_SIZE, false)?
     .visit_field::<Vec3>("start_color", Self::VT_START_COLOR, false)?
     .visit_field::<f32>("gravity_modifier", Self::VT_GRAVITY_MODIFIER, false)?
     .visit_field::<bool>("simulation_space", Self::VT_SIMULATION_SPACE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("texture_path", Self::VT_TEXTURE_PATH, false)?
     .finish();
    Ok(())
  }
}
pub struct ParticleSystemComponentDataArgs<'a> {
    pub max_particles: i32,
    pub emission_rate: f32,
    pub lifetime: f32,
    pub start_speed: f32,
    pub start_size: f32,
    pub start_color: Option<&'a Vec3>,
    pub gravity_modifier: f32,
    pub simulation_space: bool,
    pub texture_path: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ParticleSystemComponentDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    ParticleSystemComponentDataArgs {
      max_particles: 0,
      emission_rate: 0.0,
      lifetime: 0.0,
      start_speed: 0.0,
      start_size: 0.0,
      start_color: None,
      gravity_modifier: 0.0,
      simulation_space: false,
      texture_path: None,
    }
  }
}

pub struct ParticleSystemComponentDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ParticleSystemComponentDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_max_particles(&mut self, max_particles: i32) {
    self.fbb_.push_slot::<i32>(ParticleSystemComponentData::VT_MAX_PARTICLES, max_particles, 0);
  }
  #[inline]
  pub fn add_emission_rate(&mut self, emission_rate: f32) {
    self.fbb_.push_slot::<f32>(ParticleSystemComponentData::VT_EMISSION_RATE, emission_rate, 0.0);
  }
  #[inline]
  pub fn add_lifetime(&mut self, lifetime: f32) {
    self.fbb_.push_slot::<f32>(ParticleSystemComponentData::VT_LIFETIME, lifetime, 0.0);
  }
  #[inline]
  pub fn add_start_speed(&mut self, start_speed: f32) {
    self.fbb_.push_slot::<f32>(ParticleSystemComponentData::VT_START_SPEED, start_speed, 0.0);
  }
  #[inline]
  pub fn add_start_size(&mut self, start_size: f32) {
    self.fbb_.push_slot::<f32>(ParticleSystemComponentData::VT_START_SIZE, start_size, 0.0);
  }
  #[inline]
  pub fn add_start_color(&mut self, start_color: &Vec3) {
    self.fbb_.push_slot_always::<&Vec3>(ParticleSystemComponentData::VT_START_COLOR, start_color);
  }
  #[inline]
  pub fn add_gravity_modifier(&mut self, gravity_modifier: f32) {
    self.fbb_.push_slot::<f32>(ParticleSystemComponentData::VT_GRAVITY_MODIFIER, gravity_modifier, 0.0);
  }
  #[inline]
  pub fn add_simulation_space(&mut self, simulation_space: bool) {
    self.fbb_.push_slot::<bool>(ParticleSystemComponentData::VT_SIMULATION_SPACE, simulation_space, false);
  }
  #[inline]
  pub fn add_texture_path(&mut self, texture_path: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ParticleSystemComponentData::VT_TEXTURE_PATH, texture_path);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ParticleSystemComponentDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ParticleSystemComponentDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ParticleSystemComponentData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ParticleSystemComponentData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ParticleSystemComponentData");
      ds.field("max_particles", &self.max_particles());
      ds.field("emission_rate", &self.emission_rate());
      ds.field("lifetime", &self.lifetime());
      ds.field("start_speed", &self.start_speed());
      ds.field("start_size", &self.start_size());
      ds.field("start_color", &self.start_color());
      ds.field("gravity_modifier", &self.gravity_modifier());
      ds.field("simulation_space", &self.simulation_space());
      ds.field("texture_path", &self.texture_path());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ParticleSystemComponentData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_particle_system_component_data_unchecked`.
pub fn root_as_particle_system_component_data(buf: &[u8]) -> Result<ParticleSystemComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ParticleSystemComponentData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ParticleSystemComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_particle_system_component_data_unchecked`.
pub fn size_prefixed_root_as_particle_system_component_data(buf: &[u8]) -> Result<ParticleSystemComponentData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ParticleSystemComponentData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ParticleSystemComponentData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_particle_system_component_data_unchecked`.
pub fn root_as_particle_system_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ParticleSystemComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ParticleSystemComponentData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ParticleSystemComponentData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_particle_system_component_data_unchecked`.
pub fn size_prefixed_root_as_particle_system_component_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ParticleSystemComponentData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ParticleSystemComponentData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ParticleSystemComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ParticleSystemComponentData`.
pub unsafe fn root_as_particle_system_component_data_unchecked(buf: &[u8]) -> ParticleSystemComponentData {
  flatbuffers::root_unchecked::<ParticleSystemComponentData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ParticleSystemComponentData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ParticleSystemComponentData`.
pub unsafe fn size_prefixed_root_as_particle_system_component_data_unchecked(buf: &[u8]) -> ParticleSystemComponentData {
  flatbuffers::size_prefixed_root_unchecked::<ParticleSystemComponentData>(buf)
}
pub const PARTICLE_SYSTEM_COMPONENT_DATA_IDENTIFIER: &str = "PRTC";

#[inline]
pub fn particle_system_component_data_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PARTICLE_SYSTEM_COMPONENT_DATA_IDENTIFIER, false)
}

#[inline]
pub fn particle_system_component_data_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PARTICLE_SYSTEM_COMPONENT_DATA_IDENTIFIER, true)
}

#[inline]
pub fn finish_particle_system_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ParticleSystemComponentData<'a>>) {
  fbb.finish(root, Some(PARTICLE_SYSTEM_COMPONENT_DATA_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_particle_system_component_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ParticleSystemComponentData<'a>>) {
  fbb.finish_size_prefixed(root, Some(PARTICLE_SYSTEM_COMPONENT_DATA_IDENTIFIER));
}
}  // pub mod ECS
}  // pub mod PixelCraft

