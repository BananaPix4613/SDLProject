// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LIGHTCOMPONENT_PIXELCRAFT_ECS_H_
#define FLATBUFFERS_GENERATED_LIGHTCOMPONENT_PIXELCRAFT_ECS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "common_types_generated.h"

namespace PixelCraft {
namespace ECS {

struct LightComponentData;
struct LightComponentDataBuilder;

enum LightType : int8_t {
  LightType_Directional = 0,
  LightType_Point = 1,
  LightType_Spot = 2,
  LightType_MIN = LightType_Directional,
  LightType_MAX = LightType_Spot
};

inline const LightType (&EnumValuesLightType())[3] {
  static const LightType values[] = {
    LightType_Directional,
    LightType_Point,
    LightType_Spot
  };
  return values;
}

inline const char * const *EnumNamesLightType() {
  static const char * const names[4] = {
    "Directional",
    "Point",
    "Spot",
    nullptr
  };
  return names;
}

inline const char *EnumNameLightType(LightType e) {
  if (::flatbuffers::IsOutRange(e, LightType_Directional, LightType_Spot)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLightType()[index];
}

struct LightComponentData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LightComponentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LIGHT_TYPE = 4,
    VT_COLOR = 6,
    VT_INTENSITY = 8,
    VT_RANGE = 10,
    VT_INNER_ANGLE = 12,
    VT_OUTER_ANGLE = 14,
    VT_CAST_SHADOWS = 16,
    VT_SHADOW_BIAS = 18,
    VT_SHADOW_RESOLUTION = 20
  };
  PixelCraft::ECS::LightType light_type() const {
    return static_cast<PixelCraft::ECS::LightType>(GetField<int8_t>(VT_LIGHT_TYPE, 0));
  }
  const PixelCraft::ECS::Vec3 *color() const {
    return GetStruct<const PixelCraft::ECS::Vec3 *>(VT_COLOR);
  }
  float intensity() const {
    return GetField<float>(VT_INTENSITY, 0.0f);
  }
  float range() const {
    return GetField<float>(VT_RANGE, 0.0f);
  }
  float inner_angle() const {
    return GetField<float>(VT_INNER_ANGLE, 0.0f);
  }
  float outer_angle() const {
    return GetField<float>(VT_OUTER_ANGLE, 0.0f);
  }
  bool cast_shadows() const {
    return GetField<uint8_t>(VT_CAST_SHADOWS, 0) != 0;
  }
  float shadow_bias() const {
    return GetField<float>(VT_SHADOW_BIAS, 0.0f);
  }
  int32_t shadow_resolution() const {
    return GetField<int32_t>(VT_SHADOW_RESOLUTION, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_LIGHT_TYPE, 1) &&
           VerifyField<PixelCraft::ECS::Vec3>(verifier, VT_COLOR, 4) &&
           VerifyField<float>(verifier, VT_INTENSITY, 4) &&
           VerifyField<float>(verifier, VT_RANGE, 4) &&
           VerifyField<float>(verifier, VT_INNER_ANGLE, 4) &&
           VerifyField<float>(verifier, VT_OUTER_ANGLE, 4) &&
           VerifyField<uint8_t>(verifier, VT_CAST_SHADOWS, 1) &&
           VerifyField<float>(verifier, VT_SHADOW_BIAS, 4) &&
           VerifyField<int32_t>(verifier, VT_SHADOW_RESOLUTION, 4) &&
           verifier.EndTable();
  }
};

struct LightComponentDataBuilder {
  typedef LightComponentData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_light_type(PixelCraft::ECS::LightType light_type) {
    fbb_.AddElement<int8_t>(LightComponentData::VT_LIGHT_TYPE, static_cast<int8_t>(light_type), 0);
  }
  void add_color(const PixelCraft::ECS::Vec3 *color) {
    fbb_.AddStruct(LightComponentData::VT_COLOR, color);
  }
  void add_intensity(float intensity) {
    fbb_.AddElement<float>(LightComponentData::VT_INTENSITY, intensity, 0.0f);
  }
  void add_range(float range) {
    fbb_.AddElement<float>(LightComponentData::VT_RANGE, range, 0.0f);
  }
  void add_inner_angle(float inner_angle) {
    fbb_.AddElement<float>(LightComponentData::VT_INNER_ANGLE, inner_angle, 0.0f);
  }
  void add_outer_angle(float outer_angle) {
    fbb_.AddElement<float>(LightComponentData::VT_OUTER_ANGLE, outer_angle, 0.0f);
  }
  void add_cast_shadows(bool cast_shadows) {
    fbb_.AddElement<uint8_t>(LightComponentData::VT_CAST_SHADOWS, static_cast<uint8_t>(cast_shadows), 0);
  }
  void add_shadow_bias(float shadow_bias) {
    fbb_.AddElement<float>(LightComponentData::VT_SHADOW_BIAS, shadow_bias, 0.0f);
  }
  void add_shadow_resolution(int32_t shadow_resolution) {
    fbb_.AddElement<int32_t>(LightComponentData::VT_SHADOW_RESOLUTION, shadow_resolution, 0);
  }
  explicit LightComponentDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LightComponentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LightComponentData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LightComponentData> CreateLightComponentData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    PixelCraft::ECS::LightType light_type = PixelCraft::ECS::LightType_Directional,
    const PixelCraft::ECS::Vec3 *color = nullptr,
    float intensity = 0.0f,
    float range = 0.0f,
    float inner_angle = 0.0f,
    float outer_angle = 0.0f,
    bool cast_shadows = false,
    float shadow_bias = 0.0f,
    int32_t shadow_resolution = 0) {
  LightComponentDataBuilder builder_(_fbb);
  builder_.add_shadow_resolution(shadow_resolution);
  builder_.add_shadow_bias(shadow_bias);
  builder_.add_outer_angle(outer_angle);
  builder_.add_inner_angle(inner_angle);
  builder_.add_range(range);
  builder_.add_intensity(intensity);
  builder_.add_color(color);
  builder_.add_cast_shadows(cast_shadows);
  builder_.add_light_type(light_type);
  return builder_.Finish();
}

inline const PixelCraft::ECS::LightComponentData *GetLightComponentData(const void *buf) {
  return ::flatbuffers::GetRoot<PixelCraft::ECS::LightComponentData>(buf);
}

inline const PixelCraft::ECS::LightComponentData *GetSizePrefixedLightComponentData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PixelCraft::ECS::LightComponentData>(buf);
}

inline const char *LightComponentDataIdentifier() {
  return "LGHT";
}

inline bool LightComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LightComponentDataIdentifier());
}

inline bool SizePrefixedLightComponentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LightComponentDataIdentifier(), true);
}

inline bool VerifyLightComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PixelCraft::ECS::LightComponentData>(LightComponentDataIdentifier());
}

inline bool VerifySizePrefixedLightComponentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PixelCraft::ECS::LightComponentData>(LightComponentDataIdentifier());
}

inline void FinishLightComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::LightComponentData> root) {
  fbb.Finish(root, LightComponentDataIdentifier());
}

inline void FinishSizePrefixedLightComponentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PixelCraft::ECS::LightComponentData> root) {
  fbb.FinishSizePrefixed(root, LightComponentDataIdentifier());
}

}  // namespace ECS
}  // namespace PixelCraft

#endif  // FLATBUFFERS_GENERATED_LIGHTCOMPONENT_PIXELCRAFT_ECS_H_
